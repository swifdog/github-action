const https = require('https');
https.globalAgent.options.rejectUnauthorized = false

module.exports = function (email, password) {
    const authorization = 'Basic ' + Buffer.from(email + ":" + password).toString('base64');
    console.log(authorization);

    function get(path, callback) {
        const req = https.get({
            hostname: 'api.swifdog.de',
            path: path,
            timeout: 3000,
            headers: {
                'Authorization': authorization,
            }
        }, (res) => {
            res.on('data', (data) => callback(undefined, JSON.parse(String(data))));
        })
            .on('error', (error) => callback(error, undefined))
            .on('timeout', () => {
                req.abort();
                callback('timed out.', undefined);
            });
    }

    function request(path, body, method, callback) {
        console.log(path, body, method, callback);

        const req = https.request({
            hostname: 'api.swifdog.de',
            path: path,
            timeout: 3000000,
            method: method,
            headers: {
                'Authorization': authorization,
                'Content-Type': 'application/json',
                'Content-Length': body !== undefined ? Buffer.byteLength(JSON.stringify(body)) : 0,
            },
        }, (res) => {
            if (res.statusCode === 204) {
                callback(undefined, null);
            } else if (res.statusCode !== 200 && res.statusCode !== 201) {
                callback(res.statusCode + ": " + res.statusMessage, undefined);
            }

            res.on('data', (data) => {
                callback(undefined, JSON.parse(String(data)))
            });
        })
            .on('error', (error) => callback(error, undefined))
            .on('timeout', () => {
                req.abort();
                callback('timed out.', undefined);
            });

        if (body !== undefined) req.write(JSON.stringify(body));
        req.end();
    }

    return {
        projects: {
            list: function (callback) {
                get('/projects', callback)
            },
            create: function (name, callback) {
                request('/projects', {name: name}, 'POST', callback);
            },
            delete: function (id, callback) {
                request('/projects/' + id, undefined, 'DELETE', callback);
            },

            packets: {
                list: function (projectId, callback) {
                    get('/projects/' + projectId + "/packets", callback)
                },
                create: function (projectId, packetName, imageName, callback) {
                    request('/projects/' + projectId + '/packets', {name: packetName, image: imageName}, 'POST', callback);
                },
                delete: function (projectId, id, callback) {
                    request('/projects/' + projectId + '/packets/' + id, undefined, 'DELETE', callback);
                },

                ingress: {
                    list: function (projectId, packetId, callback) {
                        get('/projects/' + projectId + "/packets/" + packetId + '/ingress', callback)
                    },
                    create: function (projectId, packetId, containerPort, hostname, callback) {
                        request('/projects/' + projectId + '/packets/' + packetId + '/ingress', {containerPort: containerPort, hostname: hostname}, 'POST', callback);
                    },
                }
            }
        },
    };
}
